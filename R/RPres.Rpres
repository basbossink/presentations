R: for your plotting and statistical needs
==========================================
author: Bas Bossink
date: 2-2-2016

Agenda
======
```{r, echo=FALSE}
library(knitr)
setwd("~/Dropbox/projects/presentations2/R")
opts_chunk$set(fig.path='figure/beamer-',fig.align='center',fig.show='hold',size='footnotesize')
```
- Introduction
  - What is R?
  - History
- The R Language
- Getting Data
- Getting to Know Data

Agenda (II)
===========
- Plots
- Reproducible Research
- The R Ecosystem
- Resources

Introduction
============

Introduction
============
- License: [Creative Commons Attribution 3](http://creativecommons.org/licenses/by/3.0/nl/)
- available at:
  [http://basbossink.github.io/presentations/](http://basbossink.github.io/presentations/)
- sources available at:
  [github](https://github.com/basbossink/presentations/tree/master/R)
- build using:
  - [R](https://www.r-project.org/)
  - [RStudio](https://www.rstudio.com/)
  - [RMarkdown](http://rmarkdown.rstudio.com/)

What is R?
=========

> R is a free software environment for statistical computing and graphics. 


What is R?
==========

- From: [Coursera: R-Programming](https://raw.githubusercontent.com/rdpeng/courses/master/02_RProgramming/OverviewHistoryR/index.Rmd)
  - License: These course materials are available under the Creative Commons Attribution NonCommercial ShareAlike (CC-NC-SA) license (http://www.tldrlegal.com/l/CC-NC-SA). 

What is R?
==========
- R is a dialect of the S language.

What is S?
==========
- S is a language that was developed by John Chambers and others at Bell
Labs.
- S was initiated in 1976 as an internal statistical analysis
environment, originally implemented as Fortran libraries.
- Early versions of the language did not contain functions for statistical
modeling.

What is S?
==========
- In 1988 the system was rewritten in C and began to resemble the system
that we have today (this was Version 3 of the language). The book
*Statistical Models in S* by Chambers and Hastie (the white book)
documents the statistical analysis functionality.
- Version 4 of the S language was released in 1998 and is the version we
use today. The book *Programming with Data* by John Chambers (the green
book) documents this version of the language.

Historical Notes
================
- In 1993 Bell Labs gave StatSci (now Insightful Corp.) an exclusive
license to develop and sell the S language.
- In 2004 Insightful purchased the S language from Lucent for \$2 million
and is the current owner.
- In 2006, Alcatel purchased Lucent Technologies and is now called
Alcatel-Lucent.

Historical Notes
================
- Insightful sells its implementation of the S language under the product
name S-PLUS and has built a number of fancy features (GUIs, mostly) on
top of it—hence the “PLUS”.
- In 2008 Insightful is acquired by TIBCO for $25 million
- The fundamentals of the S language itself has not changed dramatically
since 1998.
- In 1998, S won the Association for Computing Machinery’s Software System
Award.


S Philosophy
============
In “Stages in the Evolution of S”, John Chambers writes:

> “[W]e wanted users to be able to begin in an interactive environment,
> where they did not consciously think of themselves as programming.
> Then as their needs became clearer and their sophistication increased,
> they should be able to slide gradually into programming, when the
> language and system aspects would become more important.”

http://www.stat.bell-labs.com/S/history.html

Back to R
=========
- 1991: Created in New Zealand by Ross Ihaka and Robert Gentleman. Their
experience developing R is documented in a 1996 *JCGS* paper.
- 1993: First announcement of R to the public.
- 1995: Martin Mächler convinces Ross and Robert to use the GNU General
Public License to make R free software.
- 1996: A public mailing list is created (R-help and R-devel)

Back to R
=========

```{r,echo=FALSE}
yr <- version$year
ver <- with(version, paste(major, minor, sep = "."))
dat <- sprintf("%s %s", month.name[as.integer(version$month)], yr)
```
- 1997: The R Core Group is formed (containing some people associated with
S-PLUS). The core group controls the source code for R.
- 2000: R version 1.0.0 is released.
- `r yr`: R version `r ver` is released on `r dat`.

Features of R
=============
- Syntax is very similar to S, making it easy for S-PLUS users to switch
over.
- Semantics are superficially similar to S, but in reality are quite
different (more on that later).
- Runs on almost any standard computing platform/OS (even on the
PlayStation 3)
- Frequent releases (annual + bugfix releases); active development.

Features of R (cont'd)
======================
- Quite lean, as far as software goes; functionality is divided into
modular packages
- Graphics capabilities very sophisticated and better than most stat
packages.
- Useful for interactive work, but contains a powerful programming
language for developing new tools (user -> programmer)
- Very active and vibrant user community; R-help and R-devel mailing lists
and Stack Overflow

Features of R (cont'd)
======================
- It's free!
  (Both in the sense of beer and in the sense of speech.)
- End of content from [Coursera: R-Programming](https://raw.githubusercontent.com/rdpeng/courses/master/02_RProgramming/OverviewHistoryR/index.Rmd)

The R Language 
==============


The R Language: Help 
====================
- `#` is the comment character
- use the `help` function for help
```{r eval=FALSE}
help("plot") 
?plot
```

Demo
====

Logicals 
========
```{r}
TRUE
FALSE
```

Characters
==========
```{r}
"Hello, world!" 
```

Numeric Values 
==============
```{r}
13.37
37
```

Not Available 
=============
- `r NA`, R's representation of missing data
```{r}
NA
```

Vectors
=======
- `c()`, 'concatenate', creates a vector
- can hold values of a single type
```{r}
c(1,2,3) 
```

Vectors (II)
============
- coercion takes place
```{r}
c(1, TRUE, "Flinstone") 
```

Indexing Vectors
================
```{r}
c(1,2)[1]
c(3,4)[2]
c()[1]
```

Lists
=====
- can hold values of different types 
```{r}
list(1,TRUE)
```

Lists (II)
==========
```{r}
str(list(1,TRUE))
```

Indexing Lists
=============
```{r}
list(1,TRUE)[[2]]
```

Ranges
======
- `:` range operator
```{r}
1:4
```
- range operator also works in reverse order
```{r}
6:3
```

Sequences
=========
- generate sequences with a certain step size
```{r}
seq(0, 1, 0.21) 
```

Vector Operations 
=================
- fred = `r 1:3`
- wilma = `r 3:6`
- fred * wilma = `r (1:3)*(3:6)`
- almost all operations can be performed on vectors

Vector Dimensions
=================
```{r}
a <- 1:4
dim(a)
dim(a) <- c(2,2)
a
```

Factors 
=======
- factors, R's representation of categorical data
```{r}
factor(c("Medium", "High"), c("Low", "Medium", "High"), ordered= TRUE)
```

Data Frames 
===========
- data frames, a type that represents tabular data
```{r}
c <- data.frame(married=c(TRUE,NA), medication=c("a", "b"), satisfaction=c(1,2))
c
```

Indexing Data Frames
====================
- can be indexed using numbers
```{r}
c[,1] 
```
- can be index using column names
```{r}
c[, "married"] 
```

Indexing Data Frames (II) 
=========================
- can be indexed using the `$` operator
```{r}
c$medication 
```
- can be indexed using vectors
```{r}
c[1, 2:3] 
```

Data Frames: Column Names
=========================
```{r}
names(c)
names(c)[1] <- "marital.status"
names(c)
```

Getting Data
============

Getting Data
============
- files, CSV, delimited
- databases, SQL, MongoDb
- webpages
- JSON
- Excel, SAS, SPSS, Stata, systat, Minitab

Reading CSV Files
=================
```{bash, eval=FALSE}
git clone git://git.kernel.org/.../linux-stable.git
cd linux-stable
git checkout -b stable-v4.3.3 v4.3.3 
cloc --csv --out=linux-4.3.3.csv .
```

```{r}
freebsd <- read.csv("freebsd-10.2.csv")
linux <- read.csv("linux-4.3.3.csv")
openbsd <- read.csv("openbsd-5.8.csv")
minix <- read.csv("minix-3.3.csv")
```

Getting to Know Data
====================

Data structure
==============
```{r}
str(linux) # show the 'structure' of the argument
```

Looking At Data
===============
```{r}
head(linux, 3) # show the first couple of rows
```
Looking At Data
===============
```{r}
tail(linux, 3) # show the last couple of rows
```

Summarizing Data
================
```{r}
summary(linux$files) # summarize the data
```

Summarizing Data
================
```{r}
library(Hmisc) # load the previously installed "Hmisc" package
data.frame(describe(linux$files)$counts)
```

Summarizing Data
================
```{r}
library(pastecs)
options(digits = 3)
stats <- data.frame(stat.desc(linux$files, basic=FALSE))
names(stats) <- ""
stats
```

Summarizing Data
================
```{r}
stats <- data.frame(stat.desc(linux$files, basic=FALSE, desc=FALSE,norm=TRUE))
names(stats) <- ""
stats
```

Summarizing Data
================
```{r}
colSums(linux[,c(1,3:5)])
```

Summarizing Data
================
```{r}
lines.per.file <- rowSums(linux[,3:5])/linux[,1]
mean(lines.per.file)
```

Extending Your Data
====================
```{r}
total.lines <- rowSums(linux[,3:5])
linux$total.lines <- total.lines
head(linux[,3:6], 3)
```

Sorting Data
====================
```{r}
head(linux[
  order(linux$total.lines, 
      decreasing=TRUE),
    c(2,1,6)])
```

Merging Data
============
```{r}
linux$project <- c("linux 4.3.3")
head(linux[,c(1,7)],4)
```
```{r,echo=FALSE}
linux <- read.csv("linux-4.3.3.csv")
freebsd$project <- c("FreeBSD 10.2")
minix$project <- c("minix 3.3")
linux$project <- c("linux 4.3.3")
openbsd$project <- c("OpenBSD 5.8")
```
Merging Data
============
```{r}
all <- rbind(freebsd, minix, linux, openbsd)
total.lines <- rowSums(all[,3:5])
all$total.lines <- total.lines
head(all[,5:7], 3)
```

Plots
=====

Plots
=====
```{r}
totalsPerProject <- with(all, aggregate(total.lines, list(project), sum))
```

Plots
=====
```{r eval=FALSE}
barplot(totalsPerProject$x, names=totalsPerProject$Group.1, las=1)
```
```{r echo=FALSE}
opar <- par(no.readonly = TRUE)
par(mar=c(3,7,1,1))
barplot(totalsPerProject$x, names=totalsPerProject$Group.1, las=1)
par(opar)  
```

Plots
=====
```{r eval=FALSE}
barplot(sort(table(all$language), decreasing = TRUE), las=2)
```
```{r echo=FALSE}
opar <- par(no.readonly = TRUE)
par(mar=c(15,2,1,1))
barplot(sort(table(all$language), decreasing = TRUE), las=2)
par(opar)  
```

Plots
=====
```{r eval=FALSE}
with(all[all$project=="linux 4.3.3",], barplot(total.lines, names=language, las=2, log ="y"))
```
```{r echo=FALSE}
opar <- par(no.readonly = TRUE)
par(mar=c(15,7,1,1))
linux.only <- all[all$project=="linux 4.3.3",]
with(linux.only, barplot(total.lines, names=language, las=2, log ="y"))
par(opar)  
```

Plots
=====
```{r}
with(all, boxplot(total.lines ~ project, log="y",col=rainbow(4)))
```

Plots
=====
```{r}
grouped <- aggregate(all[,c(3,4,5)], by=list(all$project), sum)
names(grouped)[1] <- "project"
```

Plots
=====
```{r}
bars <- data.frame(t(grouped[,2:4]))
names(bars) <- grouped$project
totals <- colSums(bars)
relative <- t(t(bars)/totals)
```

Plots
=====
```{r}
barplot(as.matrix(relative), col=rainbow(3), legend.text = row.names(relative))
```

Plots
=====
```{r}
barplot(sort(relative[2,], decreasing =TRUE))
```

Plots
=====
```{r}
set.seed(1234) # set the seed for reproducibility
x <- seq(-10,10, 0.1)
y <- -2 + 3*rnorm(201) # generate some random variables taken from the normal distribution
```

Plots
=====
```{r}
plot(x,y)
abline(lm(y~x)) # draw the linear regression line
```

Plots
=====
```{r}
hist(y) # plot a histogram of y
rug(y) 
```

Plots
=====
```{r}
plot(density(y)) # a density plot of y
```

Plots
=====
```{r}
par(fig=c(0,0.8,0,0.8), new=TRUE)
plot(x,y)
par(fig=c(0.65,1,0,0.8),new=TRUE)
boxplot(y, axes=FALSE)
```

Reproducible Research
=====================


Reproducible Research
=====================
- make research reproducible:
  - independently repeated
  - validated
- 'open-source' research:
  - provide all code
  - provide all data

Reproducible Research Resources
===============================
- [Reproducible Research](http://reproducibleresearch.net/)
- [Coursera course: Reproducible Research](https://www.coursera.org/learn/reproducible-research)

Reproducible Research Tools
===========================
- [knitr](http://yihui.name/knitr/)
- [rmarkdown](http://rmarkdown.rstudio.com/)
- [CRAN Task View: Reproducible Research](https://cran.r-project.org/web/views/ReproducibleResearch.html)

The R Ecosystem
===============

The R Ecosystem
===============
- a large set of packages available on [CRAN](https://cran.r-project.org/)
  - [The Comprehensive R Archive Network](https://cran.r-project.org/)
- packages can be installed using:
  ```{r eval=FALSE}
  install.packages("RUnit")
  ```
- use installed packages using:
  ```{r eval=FALSE}
  library(RUnit)
  ```
  
The R Ecosystem
===============
- IDE's:
  - [RStudio](https://www.rstudio.com/)
  - [RKWard](https://rkward.kde.org/)
  - [ESS (“Emacs Speaks Statistics”)](http://ess.r-project.org/)

Resources
=========

Learning R: Free Texts 
======================
- [R manuals](https://cran.r-project.org/manuals.html)
- [Using R for Data Analysis and Graphics](http://cran.r-project.org/doc/contrib/usingR.pdf)
- [The R Guide](http://cran.r-project.org/doc/contrib/Owen-TheRGuide.pdf)
- [An Introduction to R](An Introduction to R)

Learning R: Learning by doing
=============================
- [swirl](http://swirlstats.com/) : teaches R like e.g. vimtutor 
- [RStudio Online learning](http://stackoverflow.com/questions/tagged/r)
- [Datacamp.com: Free Introduction to R](https://www.datacamp.com/courses/free-introduction-to-r)
- [codeschool.com: Try R](http://tryr.codeschool.com/)
- [Coursera Data Science specialization](https://www.coursera.org/specializations/jhu-data-science)

Learning R: Online resources
============================
- [Google](https://Www.google.com)
- [StackOverflow tag: r](http://stackoverflow.com/questions/tagged/r)
- [CrossValidated](http://stats.stackexchange.com/)
- [Quick R](http://www.statmethods.net/)

Learning R: Books
=================
- [R in Action](https://www.manning.com/books/r-in-action-second-edition?a_bid=5c2b1e1d&a_aid=RiA2ed)
- [The Art of R Programming](http://www.amazon.com/Art-Programming-Statistical-Software-Design/dp/1593273843/ref=sr_1_1?s=books&ie=UTF8&qid=1453743811&sr=1-1&keywords=r+programming)
- [R Cookbook](http://www.amazon.com/Cookbook-OReilly-Cookbooks-Paul-Teetor/dp/0596809158/ref=sr_1_2?s=books&ie=UTF8&qid=1453743811&sr=1-2&keywords=r+programming)
- [The R Book](http://www.amazon.co.uk/gp/product/0470973927)

Podcasts
========
- [Linear Digressions](http://lineardigressions.com/)
- [The R-Podcast](https://r-podcast.org/)
- [R Talk Podcast](http://rtalk.org/)
- [Not So Standard Deviations](https://soundcloud.com/nssd-podcast)

Questions?
==========

Thank you
=========
