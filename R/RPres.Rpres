R: for your plotting and statistical needs
==========================================
author: Bas Bossink
date: 2-2-2016

Agenda
======
```{r, echo=FALSE}
library(knitr)
setwd("~/Dropbox/projects/presentations2/R")
opts_chunk$set(fig.path='figure/beamer-',fig.align='center',fig.show='hold',size='footnotesize')
```
- Introduction
- History
- The R Language
- Getting Data
- Getting To Know Data
- Plots
- The Ecosystem

Introduction
============
- License
  - [Creative Commons Attribution 3](http://creativecommons.org/licenses/by/3.0/nl/)
- build using:
  - [R][r]
  - [RStudio][rstudio]
  - [RMarkdown][rmd]

What is R
=========

> R is a free software environment for statistical computing and graphics. 


What is R?
==========

- From: [Coursera: R-Programming](https://raw.githubusercontent.com/rdpeng/courses/master/02_RProgramming/OverviewHistoryR/index.Rmd)
  - License: These course materials are available under the Creative Commons Attribution NonCommercial ShareAlike (CC-NC-SA) license (http://www.tldrlegal.com/l/CC-NC-SA). 

What is R?
==========
- R is a dialect of the S language.

What is S?
==========
- S is a language that was developed by John Chambers and others at Bell
Labs.
- S was initiated in 1976 as an internal statistical analysis
environment—originally implemented as Fortran libraries.
- Early versions of the language did not contain functions for statistical
modeling.

What is S?
==========
- In 1988 the system was rewritten in C and began to resemble the system
that we have today (this was Version 3 of the language). The book
*Statistical Models in S* by Chambers and Hastie (the white book)
documents the statistical analysis functionality.
- Version 4 of the S language was released in 1998 and is the version we
use today. The book *Programming with Data* by John Chambers (the green
book) documents this version of the language.

Historical Notes
================
- In 1993 Bell Labs gave StatSci (now Insightful Corp.) an exclusive
license to develop and sell the S language.
- In 2004 Insightful purchased the S language from Lucent for \$2 million
and is the current owner.
- In 2006, Alcatel purchased Lucent Technologies and is now called
Alcatel-Lucent.

Historical Notes
================
- Insightful sells its implementation of the S language under the product
name S-PLUS and has built a number of fancy features (GUIs, mostly) on
top of it—hence the “PLUS”.
- In 2008 Insightful is acquired by TIBCO for $25 million
- The fundamentals of the S language itself has not changed dramatically
since 1998.
- In 1998, S won the Association for Computing Machinery’s Software System
Award.


S Philosophy
============
In “Stages in the Evolution of S”, John Chambers writes:

> “[W]e wanted users to be able to begin in an interactive environment,
> where they did not consciously think of themselves as programming.
> Then as their needs became clearer and their sophistication increased,
> they should be able to slide gradually into programming, when the
> language and system aspects would become more important.”

http://www.stat.bell-labs.com/S/history.html

Back to R
=========
- 1991: Created in New Zealand by Ross Ihaka and Robert Gentleman. Their
experience developing R is documented in a 1996 *JCGS* paper.
- 1993: First announcement of R to the public.
- 1995: Martin Mächler convinces Ross and Robert to use the GNU General
Public License to make R free software.
- 1996: A public mailing list is created (R-help and R-devel)

Back to R
=========

```{r,echo=FALSE}
yr <- version$year
ver <- with(version, paste(major, minor, sep = "."))
dat <- sprintf("%s %s", month.name[as.integer(version$month)], yr)
```
- 1997: The R Core Group is formed (containing some people associated with
S-PLUS). The core group controls the source code for R.
- 2000: R version 1.0.0 is released.
- `r yr`: R version `r ver` is released on `r dat`.

Features of R
=============
- Syntax is very similar to S, making it easy for S-PLUS users to switch
over.
- Semantics are superficially similar to S, but in reality are quite
different (more on that later).
- Runs on almost any standard computing platform/OS (even on the
PlayStation 3)
- Frequent releases (annual + bugfix releases); active development.

Features of R (cont'd)
======================
- Quite lean, as far as software goes; functionality is divided into
modular packages
- Graphics capabilities very sophisticated and better than most stat
packages.
- Useful for interactive work, but contains a powerful programming
language for developing new tools (user -> programmer)
- Very active and vibrant user community; R-help and R-devel mailing lists
and Stack Overflow

Features of R (cont'd)
======================
- It's free!
  (Both in the sense of beer and in the sense of speech.)
- End of content from [Coursera: R-Programming](https://raw.githubusercontent.com/rdpeng/courses/master/02_RProgramming/OverviewHistoryR/index.Rmd)

The R Language 
==============
```{r}
# comment
help("help") # retrieve help about a topic
?plot # or function
fred <- "Flinstone" # <- assignment, 
barney <- c(1,2,3) # c(), concatenate create vector
wilma <- 1:4 # : range operator
wilma
```
The R Language 
==============
```{r}
rubbles <- 6:3 # range also works in reverse order
rubbles
```
The R Language 
==============
```{r}
fred <- seq(10, 100, 10) # generate sequences with a certain step size
fred
```

The R Language 
==============
- fred = `r fred`
- wilma = `r wilma`
- fred*wilma = `r fred*wilma`
- almost all operations can be performed on vectors

The R Language 
==============
```{r}
a <- c(TRUE,FALSE) # also has booleans
a
b <- c("Hello,", "world!") # strings
b
seq(0, 1, 0.3) # doubles
```
The R Language 
==============
- factors, R's representation of categorical data
```{r}
d <- factor(c("Medium", "High"), c("Low", "Medium", "High"), ordered= TRUE)
d
```
The R Language 
==============
- data frames, a type that represents tabular data
```{r}
c <- data.frame(a, b, d)
names(c) <- c("Truth", "Out.there", "Satisfaction")
c
```

The R Language 
==============
```{r}
c[,1] # can be indexed using numbers
c[, "Truth"] # can be index using column names
```

The R Language 
==============
```{r}
c$Out.there # can be index using the $ operator
c[1, 2:3] # can be indexed using vectors
```

Getting Data
============

```{bash, eval=FALSE}
git clone git://git.kernel.org/.../linux-stable.git
cd linux-stable
git checkout -b stable-v4.3.3 v4.3.3 
cloc --csv --out=linux-4.3.3.csv .
```

```{r}
freebsd <- read.csv("freebsd-10.2.csv")
linux <- read.csv("linux-4.3.3.csv")
openbsd <- read.csv("openbsd-5.8.csv")
minix <- read.csv("minix-3.3.csv")
```

Getting To Know Data
====================
```{r}
str(freebsd) # show the 'structure' of the argument
```

Getting To Know Data
====================
```{r}
head(freebsd) # show the first couple of rows
```

Getting To Know Data
====================
```{r}
summary(freebsd$files) # summarize the data
```

Getting To Know Data
====================
```{r}
library(Hmisc) # load the previously installed "Hmisc" package
t(t(describe(freebsd$files)$counts))
```

Getting To Know Data
====================
```{r}
library(pastecs)
options(digits = 3)
t(t(stat.desc(freebsd$files, basic=FALSE)))
```
Getting To Know Data
====================
```{r}
t(t(stat.desc(freebsd$files, basic=FALSE, desc=FALSE,norm=TRUE)))
```

Getting To Know Data
====================
```{r}
colSums(freebsd[,c(1,3:5)])
```

Getting To Know Data
====================
```{r}
lines.per.file <- rowSums(freebsd[,3:5])/freebsd[,1]
mean(lines.per.file)
```

Getting To Know Data
====================
```{r}
total.lines <- rowSums(freebsd[,3:5])
freebsd$total.lines <- total.lines
head(freebsd[,3:6], 3)
```

Getting To Know Data
====================
```{r}
head(freebsd[
  order(freebsd$total.lines, 
      decreasing=TRUE),
    c(2,1,6)])
```
Merging Data
====================
```{r}
freebsd$project <- c("FreeBSD 10.2")
head(freebsd[,c(1,7)],4)
```
```{r,echo=FALSE}
freebsd <- read.csv("freebsd-10.2.csv")
freebsd$project <- c("FreeBSD 10.2")
minix$project <- c("minix 3.3")
linux$project <- c("linux 4.3.3")
openbsd$project <- c("OpenBSD 5.8")
```
Merging Data
====================
```{r}
all <- rbind(freebsd, minix, linux, openbsd)
total.lines <- rowSums(all[,3:5])
all$total.lines <- total.lines
head(all[,5:7], 3)
```
Plots
=====
```{r}
totalsPerProject <- with(all, aggregate(total.lines, list(project), sum))
```

Plots
=====
```{r eval=FALSE}
barplot(totalsPerProject$x, names=totalsPerProject$Group.1, las=1)
```
```{r echo=FALSE}
opar <- par(no.readonly = TRUE)
par(mar=c(3,7,1,1))
barplot(totalsPerProject$x, names=totalsPerProject$Group.1, las=1)
par(opar)  
```
Plots
=====
```{r eval=FALSE}
barplot(sort(table(all$language), decreasing = TRUE), las=2)
```
```{r echo=FALSE}
opar <- par(no.readonly = TRUE)
par(mar=c(15,2,1,1))
barplot(sort(table(all$language), decreasing = TRUE), las=2)
par(opar)  
```
Plots
=====
```{r}
set.seed(1234) # set the seed for reproducibility
x <- seq(-10,10, 0.1)
y <- -2 + 3*rnorm(201) # generate some random variables taken from the normal distribution
```
Plots
=====
```{r}
plot(x,y)
abline(lm(y~x)) # draw the linear regression line
```
Plots
=====
```{r}
hist(y) # plot a histogram of y
```

Plots
=====
```{r}
plot(density(y)) # a density plot of y
```

Plots
=====
```{r eval=FALSE}
with(all[all$project=="linux 4.3.3",], barplot(total.lines, names=language, las=2, log ="y"))
```
```{r echo=FALSE}
opar <- par(no.readonly = TRUE)
par(mar=c(15,7,1,1))
linux.only <- all[all$project=="linux 4.3.3",]
with(linux.only, barplot(total.lines, names=language, las=2, log ="y"))
par(opar)  
```
Plots
=====
```{r}
with(all, boxplot(total.lines ~ project, log="y",col=rainbow(4)))
```
Plots
=====
```{r eval=FALSE}
with(all, boxplot(total.lines ~ language, log="y", las=2)) 
```
```{r echo=FALSE}
opar <- par(no.readonly = TRUE)
par(mar=c(15,7,1,1))
with(all, boxplot(total.lines ~ language, log="y", las=2))
par(opar)
```
Plots
=====
```{r}
grouped <- aggregate(all[,c(3,4,5)], by=list(all$project), sum)
names(grouped)[1] <- "project"
```
Plots
=====
```{r}
bars <- data.frame(t(grouped[,2:4]))
names(bars) <- grouped$project
totals <- colSums(bars)
relative <- t(t(bars)/totals)
```
Plots
=====
```{r}
barplot(as.matrix(relative), col=rainbow(3), legend.text = row.names(relative))
```
Plots
=====
```{r}
barplot(sort(relative[2,], decreasing =TRUE))
```
[r]: https://www.r-project.org/
[rstudio]: https://www.rstudio.com/
[rmd]: http://rmarkdown.rstudio.com/